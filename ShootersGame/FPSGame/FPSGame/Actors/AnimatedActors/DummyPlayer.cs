using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using SkinnedModel;
using Primitives3D;

namespace FPSGame 
{
    class DummyPlayer : Player
    {
        public int dummyIndex;

        public DummyPlayer(Game1 game,Vector3 initialPosition, string newName):base(game)
        {
            playerName = newName;
            this.pose.WorldPosition=initialPosition;
            
        }

        public override void Initialize()
        {
            base.parentInitialize();
        }

        protected override void LoadContent()
        {
            base.parentLoadContent();
            alienRifle = Game.Content.Load<Model>("AssetCollection/Weapons/gestalt_alien_rifle_maya");
            boundingBox = Game.Content.Load<Model>("AssetCollection\\Characters\\Roland\\Roland_bounding_box");
            // Code auto-generated by AnimationDefinitionFileGenerator_v1
            animationClips.Add("crouch_back", skinningData.AnimationClips["crouch_back"]);
            animationClips.Add("crouch_fire_01", skinningData.AnimationClips["crouch_fire_01"]);
            animationClips.Add("crouch_forward", skinningData.AnimationClips["crouch_forward"]);
            animationClips.Add("crouch_idle", skinningData.AnimationClips["crouch_idle"]);
            animationClips.Add("crouch_left_b", skinningData.AnimationClips["crouch_left_b"]);
            animationClips.Add("crouch_left_f", skinningData.AnimationClips["crouch_left_f"]);
            animationClips.Add("crouch_reload_01", skinningData.AnimationClips["crouch_reload_01"]);
            animationClips.Add("crouch_right_b", skinningData.AnimationClips["crouch_right_b"]);
            animationClips.Add("crouch_right_f", skinningData.AnimationClips["crouch_right_f"]);
            animationClips.Add("crouch_rotate_left", skinningData.AnimationClips["crouch_rotate_left"]);
            animationClips.Add("crouch_rotate_right", skinningData.AnimationClips["crouch_rotate_right"]);
            animationClips.Add("crouch_throw_grenade", skinningData.AnimationClips["crouch_throw_grenade"]);
            animationClips.Add("crouch_weapon_switch_down", skinningData.AnimationClips["crouch_weapon_switch_down"]);
            animationClips.Add("crouch_weapon_switch_up", skinningData.AnimationClips["crouch_weapon_switch_up"]);
            animationClips.Add("jump_idle", skinningData.AnimationClips["jump_idle"]);
            animationClips.Add("run_back", skinningData.AnimationClips["run_back"]);
            animationClips.Add("run_forward", skinningData.AnimationClips["run_forward"]);
            animationClips.Add("run_left_b", skinningData.AnimationClips["run_left_b"]);
            animationClips.Add("run_left_f", skinningData.AnimationClips["run_left_f"]);
            animationClips.Add("run_right_b", skinningData.AnimationClips["run_right_b"]);
            animationClips.Add("run_right_f", skinningData.AnimationClips["run_right_f"]);
            animationClips.Add("sprint_foward", skinningData.AnimationClips["sprint_foward"]);
            animationClips.Add("sprint_left_f", skinningData.AnimationClips["sprint_left_f"]);
            animationClips.Add("sprint_right_f", skinningData.AnimationClips["sprint_right_f"]);
            animationClips.Add("stand_fire_01", skinningData.AnimationClips["stand_fire_01"]);
            animationClips.Add("stand_idle", skinningData.AnimationClips["stand_idle"]);
            animationClips.Add("stand_melee", skinningData.AnimationClips["stand_melee"]);
            animationClips.Add("stand_reload_01", skinningData.AnimationClips["stand_reload_01"]);
            animationClips.Add("stand_rotate_left", skinningData.AnimationClips["stand_rotate_left"]);
            animationClips.Add("stand_rotate_right", skinningData.AnimationClips["stand_rotate_right"]);
            animationClips.Add("stand_throw_grande", skinningData.AnimationClips["stand_throw_grande"]);
            animationClips.Add("stand_weapon_switch_down", skinningData.AnimationClips["stand_weapon_switch_down"]);
            animationClips.Add("stand_weapon_switch_up", skinningData.AnimationClips["stand_weapon_switch_up"]);
            animationClips.Add("walk_back", skinningData.AnimationClips["walk_back"]);
            animationClips.Add("walk_forward", skinningData.AnimationClips["walk_forward"]);
            animationClips.Add("walk_left_b", skinningData.AnimationClips["walk_left_b"]);
            animationClips.Add("walk_left_f", skinningData.AnimationClips["walk_left_f"]);
            animationClips.Add("walk_right_b", skinningData.AnimationClips["walk_right_b"]);
            animationClips.Add("walk_right_f", skinningData.AnimationClips["walk_right_f"]);
            animationPlayer.StartClip(animationClips["stand_idle"]);
            currentWeapon = new SniperRifleHandsFP(Game, this);
            Game.Components.Add(currentWeapon);
            // Load the bounding spheres.
            skinnedSpheres = new List<SkinnedSphere>();
            populateCollisionSpheres(skinnedSpheres);
            boundingSpheres = new BoundingSphereWrapper[skinnedSpheres.Count];
            spherePrimitive = new SpherePrimitive(GraphicsDevice, 1, 12);
            cameraBounds = UpdateBoundingBox(boundingBox, Matrix.CreateRotationX(MathHelper.ToRadians(90)) * Matrix.CreateScale(0.1f) * Matrix.CreateTranslation(this.Pose.WorldTransform.Translation));
        }

        public override void Update(GameTime gameTime)
        {
            UpdateBoundingSpheres();
            base.parentUpdate(gameTime);
        }

        public override void Draw(GameTime gameTime)
        {
            //BoundingBoxRenderer.Render(Game.GraphicsDevice, camera.ViewMatrix, camera.ProjMatrix, cameraBounds);
            base.parentDraw(gameTime,pose.WorldTransform);
            drawCurrentWeapon();
            DrawBoundingSpheres(camera.ViewMatrix, camera.ProjMatrix);
        }

        public void UpdatePose(Matrix newWorldTransform)
        {
            this.Pose.WorldTransform = newWorldTransform;
            cameraBounds = UpdateBoundingBox(boundingBox, Matrix.CreateRotationX(MathHelper.ToRadians(90)) * Matrix.CreateScale(0.1f) * Matrix.CreateTranslation(this.Pose.WorldTransform.Translation));
        }

        public void UpdateAnimationState(int animationStateInInt)
        {
            Player.animationState newAnimationState = (Player.animationState)animationStateInInt;

            if (newAnimationState == animationState.IDLE)
            {
                animationPlayer.StartClip(animationClips["stand_idle"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_FORWARD)
            {
                playerAnimationState = animationState.RUNNING_FORWARD;
                animationPlayer.StartClip(animationClips["run_forward"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_BACKWARD)
            {
                playerAnimationState = animationState.RUNNING_BACKWARD;
                animationPlayer.StartClip(animationClips["run_back"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_LEFT)
            {
                playerAnimationState = animationState.RUNNING_LEFT;
                animationPlayer.StartClip(animationClips["run_left_f"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_RIGHT)
            {
                playerAnimationState = animationState.RUNNING_RIGHT;
                animationPlayer.StartClip(animationClips["run_right_f"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_LEFT_BACKWARD)
            {
                playerAnimationState = animationState.RUNNING_LEFT_BACKWARD;
                animationPlayer.StartClip(animationClips["run_left_b"]);
            }
            else if (newAnimationState == animationState.START_RUNNING_RIGHT_BACKWARD)
            {
                playerAnimationState = animationState.RUNNING_RIGHT_BACKWARD;
                animationPlayer.StartClip(animationClips["run_right_b"]);
            }
            else if (newAnimationState == animationState.START_JUMPING)
            {
                playerAnimationState = animationState.JUMPING;
                animationPlayer.StartClip(animationClips["jump_idle"]);
            }
            else if (newAnimationState == animationState.START_CROUCH_IDLE)
            {
                playerAnimationState = animationState.CROUCH_IDLE;
                animationPlayer.StartClip(animationClips["crouch_idle"]);
            }
            
        }
    }
}
